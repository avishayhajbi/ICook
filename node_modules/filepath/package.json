{
  "name": "filepath",
  "version": "0.8.1",
  "description": "A little utility interface for working with the filesystem in Node.js.",
  "author": {
    "name": "Kris Walker",
    "email": "kris@kixx.name",
    "url": "http://www.kixx.name/"
  },
  "keywords": [
    "filepath",
    "files",
    "directories",
    "file",
    "system",
    "filesystem",
    "path"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/kixxauth/filepath.git"
  },
  "bugs": {
    "url": "https://github.com/kixxauth/filepath/issues"
  },
  "dependencies": {
    "iou": "2.0.0"
  },
  "devDependencies": {
    "nodeunit": "0.8.1"
  },
  "readme": "Filepath\n========\n\nA little utility interface for working with the file system in Node.js programs.\n\n## Installation\nThe most common use of Filepath is to use it as a library. In that case, just\ninclude it in your Node.js project by adding a line for Filepath in your\n`pacakge.json`. For more information about your `package.json` file, you should\ncheck out the npm documentation by running `npm help json`.\n\nAlternatively, you can quickly install Filepath for use in a project by running\n\n\tnpm install filepath\n\nwhich will install filepath in your `node_modules/` folder.\n\n## Testing\nTo run the tests, just do\n\n  ./manage test\n\nYou should see the test results output.\n\nAPI Quick Reference\n-------------------\n\n### Load the module\n```JS  \nvar FP = require('filepath')\n```\n\n### Create a new FilePath object\n```JS\nvar path = FP.newPath(__filname)\nassert(path instanceof FP.FilePath)\n\n// The 'path' property is the string representation of the FilePath instance.\nassert(path.toString() === path.path)\n\n// Defaults to current working directory:\nassert(FP.newPath().toString() === process.cwd())\n\n// Joins multiple parts:\nassert(FP.newPath(__dirname, 'foo').toString() === __dirname + '/foo')\n```\n\n### #append()\n```JS\nvar path = FP.newPath(__dirname).append('foo', 'bar').append('baz')\nassert(path instanceof FP.FilePath)\nassert(path.toString() === __dirname + '/foo/bar/baz')\n```\n\n### #resolve()\n```JS\nvar path = FP.newPath(__dirname, 'lib').resolve('../README.md')\nassert(path instanceof FP.FilePath)\nassert(path.toString() === __filename)\n```\n\n### #dirname()\n```JS\nvar path = FP.newPath(__filename).dirname()\nassert(path instanceof FP.FilePath)\nassert(path.toString() === __dirname)\n```\n\n### #basename()\n```JS\nvar path = FP.newPath(__filename).basename()\nassert(path instanceof FP.FilePath)\nassert(path.toString() === 'README.md')\n```\n\n### #extname()\n```JS\nvar ext = FP.newPath(__filename).extname()\nassert(typeof ext === 'string')\nassert(ext === '.md')\n```\n\n### #split()\n```JS\nvar parts = FP.newPath(__dirname).split()\nassert(Array.isArray(parts))\n// Notice that the first and last parts are not '' even though\n// the __dirname begins with a '/'.\nassert(parts.shift() === 'home')\nassert(parts.pop() === 'filepath')\n```\n\n### #exists()\n```JS\nvar path = FP.newPath(__dirname)\nassert(path.exists())\nassert(!path.append('foo').exists())\n```\n\n### #isFile()\n```JS\nvar path = FP.newPath(__filename)\nassert(path.isFile())\nassert(!path.resolve('../').isFile())\n```\n\n### #isDirectory()\n```JS\nvar path = FP.newPath(__dirname)\nassert(path.isDirectory())\nassert(!path.append('README.md').isDirectory())\n```\n\n### #list()\n```JS\nvar li = FP.newPath(__dirname).list()\nassert(Array.isArray(li))\nvar readme = li[9]\nassert(readme instanceof FP.FilePath)\nassert(readme.toString() === __filepath)\n``` \n\n### #recurse()\n```JS\nFP.newPath(__dirname).recurse(function (path) {\n  // Each listing is a FilePath object with a fully resolved path string.\n  assert(path instanceof FP.FilePath)\n  assert(path.toString().indexOf(__dirname) === 0)\n})\n```\n\n### #mkdir()\n```JS\n// Works kinda like 'mkdir -P'.\nvar path = FP.newPath('/tmp/some/new/deep/dir')\nassert(path instanceof FP.FilePath)\nassert(path.exists())\nassert(path.isDirectory())\n```\n\n### #newReadStream()\n```JS\nvar FS = require('fs')\nvar stream = FP.newPath(__filename).newReadStream()\nassert(stream instanceof FS.ReadStream)\n```\n\n### #newWriteStream()\n```JS\nvar FS = require('fs')\nvar stream = FP.newPath('/tmp/new_file.txt').newWriteStream()\nassert(stream instanceof FS.WriteStream)\n```\n\n### #read()\n```JS\nvar path = FP.newPath(__filename)\n\n// #read() returns a promise object with #then() and #failure() methods.\npath.read().then(function (contents) {\n  // Defaults to 'utf8' so you get a string here instead of a Buffer.\n  assert(typeof contents === 'string')\n}).failure(console.error)\n```\n\n### #write()\n```JS\nvar FS = require('fs')\nvar path = FP.newPath('/tmp/new_file.txt')\n\n// #write() returns a promise object with #then() and #failure() methods.\npath.write('Hello world!\\n').then(function (returnedPath) {\n  assert(returnedPath === path)\n  // Writes the file contents in 'utf8' by default.\n  var content = FS.readFileSync(path.toString(), {encoding: 'utf8'})\n  assert(content === 'Hello world!\\n')\n}).failure(console.error)\n```\n\n### #copy()\n```JS\nvar FS = require('fs')\nvar path = FP.newPath(__filename)\nvar originalContent = FS.readFileSync(path.toString(), {encoding: 'utf8'})\n\n// #copy() returns a promise object with #then() and #failure() methods.\npath.copy('/tmp/README.md').then(function (target) {\n  // The callback value (`target`) is a new FilePath instance.\n  assert(target instanceof FP.FilePath)\n  assert(target.toString() === '/tmp/README.md')\n  var targetContent = FS.readFileSync(target.toString(), {encoding: 'utf8'})\n  assert(targetContent === originalContent)\n}).failure(console.error)\n```\n\n### .root()\n```JS\n// Handy shortcut class method.\nassert(FP.root() === '/')\n```\n\n### .home()\n```JS\n// Another handy shortcut class method.\nassert(FP.home() === '/home/kris')\n```\n\n\nCopyright and License\n---------------------\nCopyright (c) 2013 by Kris Walker <kris@kixx.name> (http://www.kixx.name).\n\nUnless otherwise indicated, all source code is licensed under the MIT license.\nSee LICENSE for details.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kixxauth/filepath",
  "_id": "filepath@0.8.1",
  "dist": {
    "shasum": "ba9a9cc1851954ee2b594123d0cefd0959989dc1",
    "tarball": "http://registry.npmjs.org/filepath/-/filepath-0.8.1.tgz"
  },
  "_from": "filepath@",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "kixxauth",
    "email": "kris@kixx.name"
  },
  "maintainers": [
    {
      "name": "kixxauth",
      "email": "kris@kixx.name"
    }
  ],
  "directories": {},
  "_shasum": "ba9a9cc1851954ee2b594123d0cefd0959989dc1",
  "_resolved": "https://registry.npmjs.org/filepath/-/filepath-0.8.1.tgz"
}
